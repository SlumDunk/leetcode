package com.github.leetcode.easy;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;

/**
 * Given an n-ary tree, return the preorder traversal of its nodes' values.
 * <p>
 * <p>
 * For example, given a 3-ary tree:
 * <p>
 * <p>
 * <p>
 * <p>
 * Return its preorder traversal as: [1,3,5,6,2,4].
 */
public class Leetcode589 {

    public List<Integer> preorder(Node root) {
        Queue<Node> nodeQueue = new ArrayDeque<Node>();
        List<Integer> resultList = new ArrayList<Integer>();
        if (root == null) {
            return null;
        } else {
            nodeQueue.add(root);
            constructList(nodeQueue, resultList);
            return resultList;
        }
    }

    private void constructList(Queue<Node> nodeQueue, List<Integer> resultList) {
        while (!nodeQueue.isEmpty()) {
            Node node = nodeQueue.poll();
            resultList.add(node.val);
            if (node.children != null && node.children.size() > 0) {
                for (int i = 0; i < node.children.size(); i++) {
                    nodeQueue.add(node.children.get(i));
                    constructList(nodeQueue, resultList);
                }
            }
        }
    }
}

class Node {
    public int val;
    public List<Node> children;

    public Node() {
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
}
